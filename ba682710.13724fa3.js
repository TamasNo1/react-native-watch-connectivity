(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{151:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return b}));var a=t(2),r=t(9),i=(t(0),t(158)),c={id:"api-events",title:"Events",sidebar_label:"Events"},s={id:"api-events",title:"Events",description:"file",source:"@site/docs/api-events.md",permalink:"/react-native-watch-connectivity/docs/api-events",editUrl:"https://github.com/mtford90/react-native-watch-connectivity.github.io/edit/master/docs/api-events.md",sidebar_label:"Events",sidebar:"someSidebar",previous:{title:"Hooks",permalink:"/react-native-watch-connectivity/docs/api-hooks"}},o=[{value:"<code>file</code>",id:"file",children:[{value:"Event Definition",id:"event-definition",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"<code>application-context</code>",id:"application-context",children:[{value:"Usage",id:"usage-1",children:[]}]},{value:"<code>user-info</code>",id:"user-info",children:[{value:"Usage",id:"usage-2",children:[]}]},{value:"<code>reachability</code>",id:"reachability",children:[{value:"Usage",id:"usage-3",children:[]}]},{value:"<code>message</code>",id:"message",children:[{value:"Usage",id:"usage-4",children:[]}]},{value:"<code>installed</code>",id:"installed",children:[{value:"Usage",id:"usage-5",children:[]}]},{value:"<code>paired</code>",id:"paired",children:[{value:"Usage",id:"usage-6",children:[]}]}],l={rightToc:o};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"file"},Object(i.b)("inlineCode",{parentName:"h2"},"file")),Object(i.b)("p",null,"File events are emitted when a transfer is ",Object(i.b)("inlineCode",{parentName:"p"},"started"),", ",Object(i.b)("inlineCode",{parentName:"p"},"finished"),", makes ",Object(i.b)("inlineCode",{parentName:"p"},"progress")," or else encounters an ",Object(i.b)("inlineCode",{parentName:"p"},"error"),"."),Object(i.b)("h3",{id:"event-definition"},"Event Definition"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface FileTransferEvent {\n    // Total number of bytes that will be transferred.\n    bytesTotal: number;\n\n    // Number of bytes transferred.\n    bytesTransferred: number;\n    \n    // When did the file finish transferring?\n    endTime: Date | null;\n    \n    // Possible file transfer error.\n    error: Error | null;\n    \n    // Estimated num. seconds remaining for file to transfer.\n    estimatedTimeRemaining: number | null;\n    \n    // bytesTransferred / bytesTotal e.g. 0.5\n    fractionCompleted: number;\n    \n    // Every file transfer is assigned a unique identifier\n    id: string;\n    \n    // User assigned metadata when transferring the file.\n    metadata: Record<string, unknown>;\n    \n    // When did the transfer begin?\n    startTime: Date;\n    \n    // The rate at which the file is transferring.\n    throughput: number | null;\n    \n    // Indicates why this event was sent.\n    type: 'error' | 'finished' | 'progress' | 'started';\n    \n    // The URI of the file being transferred from the React Native app. \n    uri: string;\n}\n")),Object(i.b)("h3",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\nwatchEvents.addListener('file', event => {\n    // ...\n    console.log(event.type);\n    // ...\n})\n")),Object(i.b)("h2",{id:"application-context"},Object(i.b)("inlineCode",{parentName:"h2"},"application-context")),Object(i.b)("p",null,"Application context events are emitted when the watch updates the application context. If using TypesScript you can define your own Application Context type for intellisense support."),Object(i.b)("h3",{id:"usage-1"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\ninterface CustomApplicationContext {\n  x: number;\n  y: number;\n}\n\nconst unsubscribe = watchEvents.addListener<CustomApplicationContext>(\n  \"application-context\", \n  event => {\n    console.log(event.x, event.y);\n  }\n)\n\n// ...\n\nunsubscribe();\n")),Object(i.b)("h2",{id:"user-info"},Object(i.b)("inlineCode",{parentName:"h2"},"user-info")),Object(i.b)("p",null,"User info events are emitted when the watch sends a user info message. If using TypesScript you can define your own User Info type for intellisense support."),Object(i.b)("h3",{id:"usage-2"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\ninterface CustomUserInfo {\n  x: number;\n  y: number;\n}\n\nconst unsubscribe = watchEvents.addListener<CustomUserInfo>(\n  \"user-info\", \n  event => {\n    console.log(event.x, event.y);\n  }\n)\n\n// ...\n\nunsubscribe();\n")),Object(i.b)("h2",{id:"reachability"},Object(i.b)("inlineCode",{parentName:"h2"},"reachability")),Object(i.b)("p",null,"Updates when reachability changes. If reachable, then you can use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-watch-connectivity/docs/communication#interactive-messaging"}),"interactive messaging")," to communicate with the watch."),Object(i.b)("h3",{id:"usage-3"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\nconst unsubscribe = watchEvents.addListener(\n  \"reachability\", \n  (reachable: boolean) => {\n    console.log(reachable ? 'is reachable' : 'not reachable')\n  }\n)\n\nunsubscribe();\n")),Object(i.b)("h2",{id:"message"},Object(i.b)("inlineCode",{parentName:"h2"},"message")),Object(i.b)("p",null,"Message events are received when the watch sends an interactive message. The callback includes a function that can be used to reply to the message"),Object(i.b)("h3",{id:"usage-4"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\ninterface MessageFromWatch {\n    text: string;\n}\n\nconst unsubscribe = watchEvents.addListener<MessageFromWatch>(\n    \"message\", \n    (message: MessageFromWatch, reply) => {\n        console.log(message.text);\n        reply({text: 'thanks watch!'})\n    }\n)\n\nunsubscribe();\n")),Object(i.b)("h2",{id:"installed"},Object(i.b)("inlineCode",{parentName:"h2"},"installed")),Object(i.b)("p",null,"Fires when the companion Apple Watch is installed/uninstalled."),Object(i.b)("h3",{id:"usage-5"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\nconst unsubscribe = watchEvents.addListener(\n  \"installed\", \n  (installed: boolean) => {\n    console.log(installed ? 'watch app is installed' : 'watch app not installed')\n  }\n)\n\nunsubscribe();\n")),Object(i.b)("h2",{id:"paired"},Object(i.b)("inlineCode",{parentName:"h2"},"paired")),Object(i.b)("p",null,"Fires when pairing status changes. E.g. if watch is unpaired from the phone."),Object(i.b)("h3",{id:"usage-6"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {watchEvents} from 'react-native-watch-connectivity'\n\nconst unsubscribe = watchEvents.addListener(\n  \"paired\", \n  (paired: boolean) => {\n    console.log(paired ? 'phone is paired with a watch' : 'phone is NOT paired with a watch')\n  }\n)\n\nunsubscribe();\n")))}b.isMDXComponent=!0},158:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),b=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=b(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=b(t),p=a,h=d["".concat(c,".").concat(p)]||d[p]||u[p]||i;return t?r.a.createElement(h,s(s({ref:n},l),{},{components:t})):r.a.createElement(h,s({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<i;l++)c[l]=t[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);