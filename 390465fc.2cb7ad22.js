(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{143:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(9),c=(n(0),n(158)),i={id:"communication",title:"Communication",sidebar_label:"Communication"},o={id:"communication",title:"Communication",description:"WatchApp communication methods can be split into two categories:",source:"@site/docs/communication.md",permalink:"/react-native-watch-connectivity/docs/communication",editUrl:"https://github.com/mtford90/react-native-watch-connectivity.github.io/edit/master/docs/communication.md",sidebar_label:"Communication",sidebar:"someSidebar",previous:{title:"FAQ",permalink:"/react-native-watch-connectivity/docs/faq"},next:{title:"Watch States",permalink:"/react-native-watch-connectivity/docs/reachability"}},s=[{value:"Interactive Messaging",id:"interactive-messaging",children:[{value:"Send Messages",id:"send-messages",children:[]},{value:"Send Message Data",id:"send-message-data",children:[]},{value:"Receive/Reply to Messages",id:"receivereply-to-messages",children:[]}]},{value:"Background Transfers",id:"background-transfers",children:[{value:"User Info",id:"user-info",children:[]},{value:"Application Context",id:"application-context",children:[]}]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"WatchApp communication methods can be split into two categories:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Interactive messaging",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Messages"),Object(c.b)("li",{parentName:"ul"},"Message data"))),Object(c.b)("li",{parentName:"ul"},"Background transfers",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"User Info"),Object(c.b)("li",{parentName:"ul"},"Application Context")))),Object(c.b)("h2",{id:"interactive-messaging"},"Interactive Messaging"),Object(c.b)("p",null,"Interactive messaging requires both your app & watch extension to be ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-watch-connectivity/docs/reachability"}),"reachable"),"."),Object(c.b)("p",null,"These methods should be used when information is required immediately & both apps are running in the foreground."),Object(c.b)("h3",{id:"send-messages"},"Send Messages"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { sendMessage } from "react-native-watch-connectivity";\n\nsendMessage({text: "Hello watch!"}, reply => {\n    console.log(reply); // {"text": "Hello React Native app!"}\n}); \n')),Object(c.b)("h3",{id:"send-message-data"},"Send Message Data"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { sendMessageData } from "react-native-watch-connectivity";\n\n// Send raw data\nsendMessageData("SGVsbG8gd2F0Y2g=", reply => {\n    console.log(reply); // SGVsbG8gcmVhY3QgbmF0aXZlIGFwcCE=\n})\n')),Object(c.b)("h3",{id:"receivereply-to-messages"},"Receive/Reply to Messages"),Object(c.b)("p",null,"You can also receive & reply to messages from the watch."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {watchEvents} from 'react-native-watch-connectivity';\n\nconst unsubscribe = watchEvents.on('message', (message, reply) => {\n    console.log('received message from watch', message);\n    reply({text: \"Thanks watch!\"});\n})\n")),Object(c.b)("p",null,"Or for message data"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {watchEvents} from 'react-native-watch-connectivity';\n\nconst unsubscribe = watchEvents.on('message-data', (data, reply) => {\n    console.log('received message data from watch', data);\n})\n")),Object(c.b)("h2",{id:"background-transfers"},"Background Transfers"),Object(c.b)("p",null,"These methods should be used when information is not required immediately. The OS is responsible for determining when\nthe content is delivered. You do not need both apps to be reachable in order to use these methods."),Object(c.b)("h3",{id:"user-info"},"User Info"),Object(c.b)("p",null,"User info differs from ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-watch-connectivity/docs/communication#application-context"}),"Application Context")," in that nothing is overridden. You will need to handle each piece of user info in order."),Object(c.b)("p",null,"This library will cache any user info received before a user info event handler is registered. This solves an issue whereby user info could be missed whilst React Native is initialising. "),Object(c.b)("h4",{id:"receive-user-info"},"Receive user info"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"import {watchEvents} from 'react-native-watch-connectivity';\n\nconst unsubscribe = watchEvents.on('user-info', userInfo => {\n    // Emits an array of user info which will include any user info received before the React Native app initialises.\n    userInfo.map(userInfo => {\n       console.log('received user info', userInfo);\n    })\n});\n")),Object(c.b)("h4",{id:"transfer-user-info-to-the-watch"},"Transfer user info to the watch"),Object(c.b)("p",null,"To send user info to the watch you can use ",Object(c.b)("inlineCode",{parentName:"p"},"transferUserInfo"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transferUserInfo } from 'react-native-watch-connectivity' \n\ntransferUserInfo({key: 'value'})\n")),Object(c.b)("p",null,"To send high priority user info, for example data that should be displayed within a Complication, on the watch face, as\nsoon as possible you can use ",Object(c.b)("inlineCode",{parentName:"p"},"transferCurrentComplicationUserInfo")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transferCurrentComplicationUserInfo } from 'react-native-watch-connectivity' \n\ntransferCurrentComplicationUserInfo({key: 'value'})\n")),Object(c.b)("h3",{id:"application-context"},"Application Context"),Object(c.b)("p",null,"Application context should be used when only the ",Object(c.b)("em",{parentName:"p"},"latest")," information is required. Once the Watch App or Companion App\nis launched the data will be received."),Object(c.b)("p",null,"Application context differs from ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-watch-connectivity/docs/communication#user-info"}),"User info")," in that the newest Application Context\ndelivery overwrites the last, whereas each User Info message forms a queue."),Object(c.b)("h4",{id:"send-application-context-to-the-watch"},"Send application context to the watch"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { updateApplicationContext } from 'react-native-watch-connectivity' \n\nupdateApplicationContext({key: \"value\"}) \n")),Object(c.b)("h4",{id:"get-the-latest-application-context"},"Get the latest application context"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { getApplicationContext } from 'react-native-watch-connectivity'\n\nconst applicationContext = await getApplicationContext() \n")),Object(c.b)("h4",{id:"application-context-events"},"Application context events"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { watchEvents } from \"react-native-watch-connectivity\";\n\nconst unsubscribe = watchEvents.addListener('application-context', context => {\n    console.log('context', context)\n})\n")))}p.isMDXComponent=!0},158:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||c;return n?r.a.createElement(d,o(o({ref:t},l),{},{components:n})):r.a.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<c;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);